---
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import { SITE_TITLE, AUTHOR, AUTHOR_TITLE } from "../../consts";
import fs from "node:fs";
import path from "node:path";
import { slugify } from "../../utils/slugify";
import ClientScripts from "../../components/ClientScripts.astro";
import { getCollection } from "astro:content";
import MarkdownIt from "markdown-it";
import sanitizeHtml from "sanitize-html";
import Icon from "../../components/Icons.astro";
import "../../styles/pages/project-detail.css";

interface Project {
  name: string;
  homepage: string;
  description: string;
  githubUrl: string | null;
  slug?: string;
  pubDate?: string;
  updatedDate?: string;
}

export async function getStaticPaths() {
  let projects: Project[] = [];

  // Try to read projects-data.json at build time
  try {
    const projectsFilePath = path.join(
      process.cwd(),
      "public",
      "projects-data.json",
    );
    if (fs.existsSync(projectsFilePath)) {
      const projectsData = JSON.parse(
        fs.readFileSync(projectsFilePath, "utf8"),
      );
      projects = projectsData.projects || [];
    } else {
      console.warn("projects-data.json does not exist, trying manual projects");
    }
  } catch (error) {
    console.warn("Error reading projects-data.json:", error);
  }

  if (projects.length === 0) {
    console.error(
      "No projects found! Please ensure the GitHub Action has generated the projects-data.json file.",
    );
  }

  console.log(`Generating static paths for ${projects.length} projects`);

  return projects.map((project) => {
    const slug = project.slug || slugify(project.name);
    return { params: { slug }, props: { project: { ...project, slug } } };
  });
}

// ---- now it's safe to access props
const { project } = Astro.props;

// Load matching extra snippet (optional)
const extras = await getCollection("projectsExtra");
const extra = extras.find((e) => e.data.slug === project.slug);

const previewAsset = extra?.data.projectPreview;
const hasPreview = Boolean((extra?.data.shouldShowPreview ?? false) && previewAsset);

// Render MD/MDX body safely
let extraHtml: string | null = null;
if (extra?.body) {
  const md = new MarkdownIt({ html: true, linkify: true });
  const rawHtml = md.render(extra.body);
  extraHtml = sanitizeHtml(rawHtml, {
    allowedTags: sanitizeHtml.defaults.allowedTags.concat([
      "img",
      "h2",
      "h3",
      "code",
      "pre",
    ]),
    allowedAttributes: {
      ...sanitizeHtml.defaults.allowedAttributes,
      img: ["src", "alt", "title", "width", "height", "loading"],
      a: ["href", "name", "target", "rel", "title"],
    },
  });
}

// Utility to linkify URLs in text
function linkify(text: string): string {
  return text.replace(
    /(https?:\/\/[^\s]+)/g,
    (url) =>
      `<a href="${url}" target="_blank" rel="noopener noreferrer">${url}</a>`,
  );
}

const pageTitle = `${project.name} - ${SITE_TITLE}`;
const richDescription = `${project.description} - A project by ${AUTHOR}, ${AUTHOR_TITLE}.`;

const pubDate = project.pubDate
  ? new Date(project.pubDate).toISOString()
  : new Date().toISOString();
const updatedDate = project.updatedDate
  ? new Date(project.updatedDate).toISOString()
  : pubDate;

const structuredData = {
  "@context": "https://schema.org",
  "@type": "SoftwareApplication",
  name: project.name,
  description: project.description,
  author: { "@type": "Person", name: AUTHOR, jobTitle: AUTHOR_TITLE },
  url: project.homepage,
  datePublished: pubDate,
  dateModified: updatedDate,
  ...(project.githubUrl && { codeRepository: project.githubUrl }),
  applicationCategory: "WebApplication",
  operatingSystem: "Any",
};
---

<html lang="en">
  <head>
    <BaseHead title={pageTitle} description={richDescription} />
    <ClientScripts />

    <!-- Structured data for better SEO -->
    <script
      type="application/ld+json"
      set:html={JSON.stringify(structuredData)}
    />
  </head>
  <body>
    <Header />
    <main class:list={["project-container", { "no-preview": !hasPreview }]}>
      <div class="project-header">
        <h1>{project.name}</h1>
        <div class="project-description">
          <p set:html={linkify(project.description)} />
        </div>
        <div class="project-links">
          <a
            href={project.homepage}
            target="_blank"
            rel="noopener noreferrer"
            class="btn btn-primary"
            aria-label={`Open ${project.name} in a new tab`}
          >
            Open in New Tab
            <Icon name="external-link" />
          </a>
          {
            project.githubUrl && (
              <a
                href={project.githubUrl}
                target="_blank"
                rel="noopener noreferrer"
                class="btn btn-secondary"
                aria-label={`View ${project.name} on GitHub (opens in a new tab)`}
              >
                <Icon name="github" />
                View on GitHub
              </a>
            )
          }
        </div>
      </div>

      {
        hasPreview && (
          <div class="preview-wrapper">
            <div class="phone-frame">
              <div class="phone-frame__bezel">
                <a
                  href={project.homepage}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="mobile-preview"
                  aria-label={`Launch a fullscreen demo of ${project.name} (opens in a new tab)`}
                >
                  <video
                    autoplay
                    loop
                    muted
                    playsinline
                    src={previewAsset}
                    aria-label={`Animated preview of ${project.name}`}
                  >
                    Your browser does not support the video tag.
                  </video>
                  <span class="play-icon-overlay">
                    <Icon name="external-link" />
                    <span>Launch App</span>
                  </span>
                </a>
              </div>
            </div>
          </div>
        )
      }

      <div
        class:list={["project-metadata", { "fade-in-on-scroll": hasPreview }]}
        data-has-preview={hasPreview}
      >
        <h2>About this project</h2>
        <p set:html={linkify(project.description)} />

        {extraHtml && <div set:html={extraHtml} />}
        {
          project.githubUrl && (
            <p>
              This is an open-source project. Feel free to explore the source
              code on
              <a
                href={project.githubUrl}
                target="_blank"
                rel="noopener noreferrer"
              >
                {" "}
                GitHub
              </a>
              .
            </p>
          )
        }
      </div>
    </main>
    <Footer />
    <script>
      (() => {
        const root = document.documentElement;
        root.classList.add("js-ready");

        const target = document.querySelector(".project-metadata");
        if (!target) return;

        const hasPreview = target.dataset.hasPreview === "true";
        if (!hasPreview) return;

        const reveal = () => {
          requestAnimationFrame(() => {
            target.classList.add("is-visible");
          });
        };

        if (!("IntersectionObserver" in window)) {
          reveal();
          return;
        }

        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                reveal();
                observer.disconnect();
              }
            });
          },
          { threshold: 0.1 },
        );

        observer.observe(target);
      })();
    </script>
  </body>
</html>
