---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE } from '../../consts';
import fs from 'node:fs';
import path from 'node:path';
import { slugify } from '../../utils/slugify';

// Define Project interface
interface Project {
  name: string;
  homepage: string;
  description: string;
  githubUrl: string | null;
}

// Helper function to read manual projects
function readManualProjects(): Project[] {
  try {
    const manualProjectsPath = path.join(process.cwd(), 'public', 'manual-projects-data.json');
    if (fs.existsSync(manualProjectsPath)) {
      const data = JSON.parse(fs.readFileSync(manualProjectsPath, 'utf8'));
      return data.manualProjects || [];
    }
  } catch (error) {
    console.warn('Could not read manual-projects-data.json:', error);
  }
  
  // Fallback to default manual project
  return [
    {
      name: 'Verbalate',
      homepage: 'https://verbalate.ai/',
      description: 'Project for Audio-Visual translation with support for voice cloning and AI lip-sync. For professionals and amateurs alike.',
      githubUrl: null
    }
  ];
}

// Required for static site generation with dynamic routes
export async function getStaticPaths() {
  let projects: Project[] = [];
  
  // Try to read projects-data.json at build time
  try {
    const projectsFilePath = path.join(process.cwd(), 'public', 'projects-data.json');
    const projectsData = JSON.parse(fs.readFileSync(projectsFilePath, 'utf8'));
    projects = projectsData.projects || [];
  } catch (error) {
    console.warn('Could not read projects-data.json, falling back to manual projects:', error);
    // Fallback to manual projects if file doesn't exist
    projects = readManualProjects();
  }
  
  // Generate paths for each project
  // With [...slug], we need to handle the slug differently
  return projects.map(project => {
    const slug = slugify(project.name);
    return {
      params: { slug }, // For [...slug] routing, this becomes the path segments
      props: { project }
    };
  });
}

// Get the project data from props
const { project } = Astro.props;

const pageTitle = `${project.name} - ${SITE_TITLE}`;
---

<html lang="en">
  <head>
    <BaseHead title={pageTitle} description={project.description} />
    <script is:inline src="/scripts/slugify.js"></script>
    <style>
      .project-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1rem;
      }
      .project-header {
        margin-bottom: 2rem;
      }
      .project-description {
        margin-bottom: 2rem;
        padding: 1rem;
        background-color: #1e1e1e;
        border-radius: 4px;
      }
      .iframe-container {
        position: relative;
        overflow: hidden;
        width: 100%;
        padding-top: 56.25%; /* 16:9 Aspect Ratio */
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
      }
      .iframe-container iframe {
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        width: 100%;
        height: 100%;
        border: none;
      }
      .project-links {
        display: flex;
        gap: 1rem;
        margin-top: 1rem;
        margin-bottom: 1.5rem;
      }
      .external-link {
        display: inline-block;
        padding: 0.5rem 1rem;
        background-color: #333;
        color: white;
        text-decoration: none;
        border-radius: 4px;
        transition: background-color 0.3s;
      }
      .github-link {
        background-color: #24292e;
      }
      .external-link:hover {
        background-color: #444;
      }
      .github-link:hover {
        background-color: #3a3f44;
      }
      .warning {
        margin-top: 1rem;
        padding: 1rem;
        background-color: #2d333b;
        border-radius: 4px;
        font-size: 0.9rem;
        color: #ddd;
      }
      .project-metadata {
        margin-top: 2rem;
        padding: 1rem;
        background-color: #1a1a1a;
        border-radius: 4px;
      }
      .project-metadata h2 {
        margin-top: 0;
        font-size: 1.2rem;
      }
    </style>
  </head>
  <body>
    <Header />
    <main>
      <div class="project-container">
        <div class="project-header">
          <h1>{project.name}</h1>
          <div class="project-description">
            <p>{project.description}</p>
          </div>
          <div class="project-links">
            <a href={project.homepage} target="_blank" rel="noopener noreferrer" class="external-link">
              Visit Website
            </a>
            {project.githubUrl && (
              <a href={project.githubUrl} target="_blank" rel="noopener noreferrer" class="external-link github-link">
                View on GitHub
              </a>
            )}
          </div>
        </div>
        <div class="iframe-container">
          <iframe 
            src={project.homepage}
            title={project.name}
            loading="lazy"
            sandbox="allow-scripts allow-same-origin allow-forms"
            referrerpolicy="no-referrer"
          ></iframe>
        </div>
        <div class="warning">
          <p>Note: Some websites may block embedding in iframes for security reasons. If the content above doesn't load, please use the "Visit Website" button.</p>
        </div>
        
        <div class="project-metadata">
          <h2>About this project</h2>
          <p>{project.description}</p>
          {project.githubUrl && (
            <p>
              This is an open-source project. Feel free to explore the source code on 
              <a href={project.githubUrl} target="_blank" rel="noopener noreferrer">GitHub</a>.
            </p>
          )}
        </div>
      </div>
    </main>
    <Footer />
  </body>
</html> 