---
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import { SITE_TITLE, AUTHOR, AUTHOR_TITLE } from "../../consts";
import fs from "node:fs";
import path from "node:path";
import { slugify } from "../../utils/slugify";
import ClientScripts from "../../components/ClientScripts.astro";
import { getCollection } from "astro:content";
import MarkdownIt from "markdown-it";
import sanitizeHtml from "sanitize-html";
import Icon from "../../components/Icons.astro";

interface Project {
  name: string;
  homepage: string;
  description: string;
  githubUrl: string | null;
  slug?: string;
  pubDate?: string;
  updatedDate?: string;
}

export async function getStaticPaths() {
  let projects: Project[] = [];

  // Try to read projects-data.json at build time
  try {
    const projectsFilePath = path.join(
      process.cwd(),
      "public",
      "projects-data.json",
    );
    if (fs.existsSync(projectsFilePath)) {
      const projectsData = JSON.parse(
        fs.readFileSync(projectsFilePath, "utf8"),
      );
      projects = projectsData.projects || [];
    } else {
      console.warn("projects-data.json does not exist, trying manual projects");
    }
  } catch (error) {
    console.warn("Error reading projects-data.json:", error);
  }

  if (projects.length === 0) {
    console.error(
      "No projects found! Please ensure the GitHub Action has generated the projects-data.json file.",
    );
  }

  console.log(`Generating static paths for ${projects.length} projects`);

  return projects.map((project) => {
    const slug = project.slug || slugify(project.name);
    return { params: { slug }, props: { project: { ...project, slug } } };
  });
}

// ---- now it's safe to access props
const { project } = Astro.props;

// Load matching extra snippet (optional)
const extras = await getCollection("projectsExtra");
const extra = extras.find((e) => e.data.slug === project.slug);

// Render MD/MDX body safely
let extraHtml: string | null = null;
if (extra?.body) {
  const md = new MarkdownIt({ html: true, linkify: true });
  const rawHtml = md.render(extra.body);
  extraHtml = sanitizeHtml(rawHtml, {
    allowedTags: sanitizeHtml.defaults.allowedTags.concat([
      "img",
      "h2",
      "h3",
      "code",
      "pre",
    ]),
    allowedAttributes: {
      ...sanitizeHtml.defaults.allowedAttributes,
      img: ["src", "alt", "title", "width", "height", "loading"],
      a: ["href", "name", "target", "rel", "title"],
    },
  });
}

const pageTitle = `${project.name} - ${SITE_TITLE}`;
const richDescription = `${project.description} - A project by ${AUTHOR}, ${AUTHOR_TITLE}.`;

const pubDate = project.pubDate
  ? new Date(project.pubDate).toISOString()
  : new Date().toISOString();
const updatedDate = project.updatedDate
  ? new Date(project.updatedDate).toISOString()
  : pubDate;

const structuredData = {
  "@context": "https://schema.org",
  "@type": "SoftwareApplication",
  name: project.name,
  description: project.description,
  author: { "@type": "Person", name: AUTHOR, jobTitle: AUTHOR_TITLE },
  url: project.homepage,
  datePublished: pubDate,
  dateModified: updatedDate,
  ...(project.githubUrl && { codeRepository: project.githubUrl }),
  applicationCategory: "WebApplication",
  operatingSystem: "Any",
};
---

<html lang="en">
  <head>
    <BaseHead title={pageTitle} description={richDescription} />
    <ClientScripts />

    <!-- Structured data for better SEO -->
    <script
      type="application/ld+json"
      set:html={JSON.stringify(structuredData)}
    />

    <style>
      .project-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1rem;
      }
      .project-header {
        margin-bottom: 2rem;
      }
      .project-description {
        margin-bottom: 2rem;
        padding: 1rem;
        background-color: #1e1e1e;
        border-radius: 4px;
      }
      .iframe-container {
        position: relative;
        overflow: hidden;
        width: 100%;
        padding-top: 56.25%; /* 16:9 Aspect Ratio */
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
      }
      .iframe-container iframe {
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        width: 100%;
        height: 100%;
        border: none;
      }
      .project-links {
        display: flex;
        gap: 1rem;
        margin-top: 1rem;
        margin-bottom: 1.5rem;
      }
      .external-link {
        display: inline-block;
        padding: 0.5rem 1rem;
        background-color: #333;
        color: white;
        text-decoration: none;
        border-radius: 4px;
        transition: background-color 0.3s;
      }
      .external-link:hover {
        background-color: #444;
      }
      .github-link {
        background-color: #24292e;
      }
      .github-link {
        background: transparent;
        border: 1px solid #555;
        color: #ccc;
      }

      .github-link:hover {
        background: #2a2a2a;
        border-color: #777;
      }
      .github-link:hover {
        background-color: #3a3f44;
      }
      .warning {
        margin-top: 1rem;
        padding: 1rem;
        background-color: #2d333b;
        border-radius: 4px;
        font-size: 0.9rem;
        color: #ddd;
      }
      .project-metadata {
        margin-top: 2rem;
        padding: 1rem;
        background-color: #1a1a1a;
        border-radius: 4px;
      }
      .project-metadata h2 {
        margin-top: 0;
        font-size: 1.2rem;
      }

      /* Button primitives */
      .btn {
        display: inline-flex;
        align-items: center;
        gap: 0.55rem;
        padding: 0.75rem 1.25rem;
        border-radius: 9999px; /* pill */
        font-weight: 600;
        text-decoration: none;
        line-height: 1;
        border: 1px solid transparent;
        transition:
          transform 0.18s ease,
          box-shadow 0.18s ease,
          background-color 0.2s ease,
          border-color 0.2s ease;
        will-change: transform;
      }

      /* Primary: Visit Website */
      .btn-primary {
        color: #fff;
        background: linear-gradient(135deg, #4cb6ff, #0078d4);
        box-shadow: 0 2px 12px rgba(0, 120, 212, 0.25);
      }
      .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 22px rgba(0, 120, 212, 0.35);
      }
      .btn-primary:active {
        transform: translateY(-1px);
      }
      .btn-primary:focus-visible {
        outline: none;
        box-shadow: 0 0 0 3px rgba(0, 120, 212, 0.55);
      }

      /* Secondary: GitHub */
      .btn-secondary {
        color: #ddd;
        background: transparent;
        border-color: #555;
      }
      .btn-secondary:hover {
        background: #2a2a2a;
        border-color: #777;
        color: #fff;
      }
      .btn-secondary:focus-visible {
        outline: none;
        box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.25);
      }
      /* Optional: subtle shine on hover for primary */
      .btn-primary::after {
        content: "";
        position: absolute;
        inset: 0;
        border-radius: inherit;
        background: linear-gradient(
          120deg,
          transparent,
          rgba(255, 255, 255, 0.25),
          transparent
        );
        transform: translateX(-120%) skewX(-20deg);
      }
      .btn-primary:hover::after {
        transform: translateX(120%) skewX(-20deg);
        transition: transform 0.7s ease;
      }

      /* Icon sizing inside buttons */
      .btn svg {
        width: 1.1em;
        height: 1.1em;
      }

      /* Respect reduced motion */
      @media (prefers-reduced-motion: reduce) {
        .btn,
        .btn-primary::after {
          transition: none;
        }
      }
    </style>
  </head>
  <body>
    <Header />
    <main>
      <div class="project-container">
        <div class="project-header">
          <h1>{project.name}</h1>
          <div class="project-description">
            <p>{project.description}</p>
          </div>
          <div class="project-links">
            <a
              href={project.homepage}
              target="_blank"
              rel="noopener noreferrer"
              class="btn btn-primary"
              aria-label={`Visit ${project.name} website (opens in a new tab)`}
            >
              Visit Website
              <!-- External arrow icon -->
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                aria-hidden="true"
              >
                <path
                  d="M18 13v6a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"
                ></path>
                <path d="M15 3h6v6"></path>
                <path d="M10 14 21 3"></path>
              </svg>
            </a>

            {
              project.githubUrl && (
                <a
                  href={project.githubUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="btn btn-secondary"
                  aria-label={`View ${project.name} on GitHub (opens in a new tab)`}
                >
                  {/* If you prefer your Icon component */}
                  <Icon name="github" />
                  View on GitHub
                </a>
              )
            }
          </div>
        </div>
        <!-- <div class="iframe-container">
          <iframe 
            src={project.homepage}
            title={project.name}
            loading="lazy"
            sandbox="allow-scripts allow-same-origin allow-forms"
            referrerpolicy="no-referrer"
          ></iframe>
        </div> -->
        <!-- <div class="warning">
          <p>Note: Some websites may block embedding in iframes for security reasons. If the content above doesn't load, please use the "Visit Website" button.</p>
        </div> -->

        <div class="project-metadata">
          <h2>About this project</h2>
          <p>{project.description}</p>
          {extraHtml && <div set:html={extraHtml} />}

          {
            project.githubUrl && (
              <p>
                This is an open-source project. Feel free to explore the source
                code on
                <a
                  href={project.githubUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  GitHub
                </a>
                .
              </p>
            )
          }
        </div>
      </div>
    </main>
    <Footer />
  </body>
</html>
