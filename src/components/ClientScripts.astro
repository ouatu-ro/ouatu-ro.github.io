---
// Import our TypeScript modules that need to run in the client
---

<!-- Client-side scripts using Astro's built-in handling -->
<script>
  // Import utility functions
  import { slugify } from "../utils/slugify";
</script>

<!-- Add direct script for copy button functionality -->
<script is:inline>
  // Enhanced Burger Menu
  document.addEventListener("DOMContentLoaded", () => {
    // Setup burger menu
    const burgerMenu = document.querySelector(".burger-menu");
    const navLinks = document.querySelector(".nav-links");

    if (burgerMenu) {
      burgerMenu.addEventListener("click", () => {
        burgerMenu.classList.toggle("active");
        navLinks.classList.toggle("active");
      });

      // Close menu when clicking elsewhere
      document.addEventListener("click", (e) => {
        if (
          !e.target.closest(".burger-menu") &&
          !e.target.closest(".nav-links") &&
          navLinks.classList.contains("active")
        ) {
          burgerMenu.classList.remove("active");
          navLinks.classList.remove("active");
        }
      });
    }

    // Add copy buttons to code blocks
    addCopyButtonsToCodeBlocks();

    // Setup project info buttons
    setupProjectInfoButtons();
  });

  // Add copy buttons to code blocks with data-language attribute
  function addCopyButtonsToCodeBlocks() {
    const codeBlocks = document.querySelectorAll(
      'pre[data-language]:not([data-language="plaintext"])',
    );

    codeBlocks.forEach((block) => {
      // Create copy button
      const copyButton = document.createElement("button");
      copyButton.className = "copy-button";
      copyButton.innerHTML =
        '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg> Copy';

      // Add click event handler
      copyButton.addEventListener("click", () => {
        // Get the code content
        const code = block.querySelector("code");
        let textToCopy = "";

        if (code) {
          // Get all lines and remove line numbers
          const lines = Array.from(code.querySelectorAll(".line"));
          textToCopy = lines.map((line) => line.textContent).join("\n");
        } else {
          // Fallback to innerText if .line elements aren't found
          textToCopy = block.innerText;
        }

        // Copy to clipboard
        navigator.clipboard
          .writeText(textToCopy)
          .then(() => {
            // Show success state
            copyButton.classList.add("copied");
            copyButton.innerHTML =
              '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg> Copied!';

            // Reset after 2 seconds
            setTimeout(() => {
              copyButton.classList.remove("copied");
              copyButton.innerHTML =
                '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg> Copy';
            }, 2000);
          })
          .catch((err) => {
            console.error("Failed to copy code: ", err);
            copyButton.textContent = "Error!";
          });
      });

      // Add button to the code block
      block.appendChild(copyButton);
    });
  }

  // Setup project info buttons to show descriptions
  function setupProjectInfoButtons() {
    // Set up info button tooltips
    const infoButtons = document.querySelectorAll(".info-btn");

    // Create tooltip element if not exists
    let tooltip = document.getElementById("tooltip");
    if (!tooltip) {
      tooltip = document.createElement("div");
      tooltip.id = "tooltip";
      document.body.appendChild(tooltip);
    }

    // For mobile: toggle project descriptions on click
    infoButtons.forEach((button) => {
      // Get description element
      const description = button.closest(
        ".project-link-wrapper",
      ).nextElementSibling;
      if (
        description &&
        description.classList.contains("project-description")
      ) {
        // Mobile click behavior
        button.addEventListener("click", () => {
          description.classList.toggle("active");
        });

        // Desktop hover behavior
        if (window.innerWidth > 768) {
          button.addEventListener("mouseenter", (e) => {
            const descText = description.textContent;
            tooltip.textContent = descText;

            // Get absolute position of the button in the document
            const buttonRect = button.getBoundingClientRect();
            const scrollLeft =
              window.pageXOffset || document.documentElement.scrollLeft;
            const scrollTop =
              window.pageYOffset || document.documentElement.scrollTop;

            // Calculate absolute position considering scroll
            const absoluteTop = buttonRect.top + scrollTop;
            const absoluteLeft = buttonRect.left + scrollLeft;
            const absoluteRight = buttonRect.right + scrollLeft;

            // Position the tooltip - start by showing it so we can measure it
            tooltip.style.opacity = "0";
            tooltip.style.visibility = "visible";

            // Calculate positions with bounds checking
            let leftPos;
            const viewportWidth = window.innerWidth;

            // Force browser to calculate tooltip size by accessing properties
            tooltip.getBoundingClientRect();
            const tooltipHeight = tooltip.offsetHeight;
            const tooltipWidth = tooltip.offsetWidth;

            // Check if tooltip would go off-screen horizontally
            if (
              absoluteRight + 10 + tooltipWidth >
              scrollLeft + viewportWidth
            ) {
              // Position to the left of the button
              leftPos = absoluteLeft - tooltipWidth - 10;
              tooltip.classList.add("tooltip-left");
            } else {
              // Position to the right of the button
              leftPos = absoluteRight + 10;
              tooltip.classList.remove("tooltip-left");
            }

            // Vertical centering with bounds checking
            let topPos =
              absoluteTop + buttonRect.height / 2 - tooltipHeight / 2;
            const viewportHeight = window.innerHeight;

            // Make sure tooltip doesn't go off screen vertically
            if (topPos + tooltipHeight > scrollTop + viewportHeight) {
              // Adjust upward
              topPos = scrollTop + viewportHeight - tooltipHeight - 10;
            }
            if (topPos < scrollTop) {
              // Adjust downward
              topPos = scrollTop + 10;
            }

            // Set final position
            tooltip.style.left = `${leftPos}px`;
            tooltip.style.top = `${topPos}px`;

            // Make tooltip visible
            tooltip.style.opacity = "1";
          });

          button.addEventListener("mouseleave", () => {
            tooltip.style.opacity = "0";
            tooltip.style.visibility = "hidden";
          });
        }
      }
    });

    // Close description when clicking outside
    document.addEventListener("click", (e) => {
      if (
        !e.target.closest(".info-btn") &&
        !e.target.closest(".project-description")
      ) {
        document
          .querySelectorAll(".project-description.active")
          .forEach((desc) => {
            desc.classList.remove("active");
          });
      }
    });
  }
</script>
